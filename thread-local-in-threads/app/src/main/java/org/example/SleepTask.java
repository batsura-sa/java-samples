/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.Random;
import java.util.concurrent.Callable;
import lombok.Builder;

import static java.lang.Thread.sleep;

public class SleepTask implements Callable<SleepTask.Info> {
    private final static ThreadLocal<Info> threadInfo = new ThreadLocal<>();
    private final static int MAX_WAIT_TIME_MS = 5000;

    private final Info info;

    public SleepTask(Integer threadInfo) {
        info = new Info(Thread.currentThread().getName(), threadInfo, null, null);
    }

    @Override
    public Info call() throws Exception {
        threadInfo.set(
                info.toBuilder()
                        .callThreadName(Thread.currentThread().getName())
                        .isVirtual(Thread.currentThread().isVirtual())
                        .build()
        );
        Random random = new Random();
        sleep(random.nextInt(MAX_WAIT_TIME_MS));
        return threadInfo.get();
    }

    @Builder(toBuilder = true)
    public record Info(
            String constructorThreadName,
            Integer number,
            String callThreadName,
            Boolean isVirtual
    ) {
    }
}